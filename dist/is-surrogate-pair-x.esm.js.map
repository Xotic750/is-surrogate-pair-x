{"version":3,"sources":["../src/is-surrogate-pair-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,WAArB;WAEqB,E;IAAd,U,QAAA,U;AAEP;;;;;;;;;;;AAUA,eAAe,SAAS,eAAT,CAAyB,KAAzB,EAAgC,KAAhC,EAAuC;AACpD,MAAM,UAAU,GAAG,SAAS,CAAC,MAA7B;;AAEA,MAAI,UAAU,GAAG,CAAjB,EAAoB;AAClB,WAAO,KAAP;AACD;;AAED,MAAI,KAAJ;AACA,MAAI,MAAJ;;AAEA,MAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,QAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,KAAK,CAAC,MAAN,KAAiB,CAAxC,EAA2C;AACzC,MAAA,KAAK,GAAG,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB,CAAR;AACA,MAAA,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB,CAAT;AACD,KAHD,MAGO;AACL,aAAO,KAAP;AACD;AACF,GAPD,MAOO,IAAI,UAAU,GAAG,CAAjB,EAAoB;AACzB,QAAI,QAAQ,CAAC,KAAD,CAAR,KAAoB,KAApB,IAA6B,KAAK,CAAC,MAAN,KAAiB,CAA9C,IAAmD,QAAQ,CAAC,KAAD,CAAR,KAAoB,KAAvE,IAAgF,KAAK,CAAC,MAAN,KAAiB,CAArG,EAAwG;AACtG,aAAO,KAAP;AACD;;AAED,IAAA,KAAK,GAAG,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB,CAAR;AACA,IAAA,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB,CAAT;AACD;;AAED,SAAO,KAAK,IAAI,MAAT,IAAmB,KAAK,IAAI,MAA5B,IAAsC,MAAM,IAAI,MAAhD,IAA0D,MAAM,IAAI,MAA3E;AACD","file":"is-surrogate-pair-x.esm.js","sourcesContent":["import isString from 'is-string';\n\nconst {charCodeAt} = '';\n\n/**\n * Tests if the two character arguments combined are a valid UTF-16\n * surrogate pair.\n *\n * @param {*} char1 - The character combination, or if `char2` is supplied then\n *  the first character of a suspected surrogate pair.\n * @param {*} [char2] - The second character of a suspected surrogate pair.\n * @returns {boolean} Returns true if the two characters create a valid\n *  'UTF-16' surrogate pair; otherwise false.\n */\nexport default function isSurrogatePair(char1, char2) {\n  const argsLength = arguments.length;\n\n  if (argsLength < 1) {\n    return false;\n  }\n\n  let first;\n  let second;\n\n  if (argsLength === 1) {\n    if (isString(char1) && char1.length === 2) {\n      first = charCodeAt.call(char1, 0);\n      second = charCodeAt.call(char1, 1);\n    } else {\n      return false;\n    }\n  } else if (argsLength > 1) {\n    if (isString(char1) === false || char1.length !== 1 || isString(char2) === false || char2.length !== 1) {\n      return false;\n    }\n\n    first = charCodeAt.call(char1, 0);\n    second = charCodeAt.call(char2, 0);\n  }\n\n  return first >= 0xd800 && first <= 0xdbff && second >= 0xdc00 && second <= 0xdfff;\n}\n"]}