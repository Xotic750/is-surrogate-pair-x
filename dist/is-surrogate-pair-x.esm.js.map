{"version":3,"sources":["../src/is-surrogate-pair-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,WAArB;WAEqB,E;IAAd,U,QAAA,U;;AAEP,IAAM,UAAU,GAAG,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAC5C,SAAO,QAAQ,CAAC,KAAD,CAAR,IAAmB,KAAK,CAAC,MAAN,KAAiB,CAA3C;AACD,CAFD;;AAIA,IAAM,UAAU,GAAG,SAAS,UAAT,CAAoB,KAApB,EAA2B,KAA3B,EAAkC;AACnD,SAAO,QAAQ,CAAC,KAAD,CAAR,IAAmB,KAAK,CAAC,MAAN,KAAiB,CAApC,IAAyC,QAAQ,CAAC,KAAD,CAAjD,IAA4D,KAAK,CAAC,MAAN,KAAiB,CAApF;AACD,CAFD;;AAIA,IAAM,QAAQ,GAAG,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACxC,MAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AACrB,WAAO;AACL,MAAA,KAAK,EAAE,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB,CADF;AAEL,MAAA,MAAM,EAAE,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB;AAFH,KAAP;AAID;;AAED,SAAO,KAAP;AACD,CATD;;AAWA,IAAM,QAAQ,GAAG,SAAS,QAAT,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC;AAC/C,MAAI,UAAU,CAAC,KAAD,EAAQ,KAAR,CAAd,EAA8B;AAC5B,WAAO;AACL,MAAA,KAAK,EAAE,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB,CADF;AAEL,MAAA,MAAM,EAAE,UAAU,CAAC,IAAX,CAAgB,KAAhB,EAAuB,CAAvB;AAFH,KAAP;AAID;;AAED,SAAO,KAAP;AACD,CATD;;AAWA,IAAM,MAAM,GAAG,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AACrC,MAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,WAAO,KAAP;AACD;;AAHoC,MAK9B,KAL8B,GAKb,MALa,CAK9B,KAL8B;AAAA,MAKvB,MALuB,GAKb,MALa,CAKvB,MALuB;AAOrC,SAAO,KAAK,IAAI,MAAT,IAAmB,KAAK,IAAI,MAA5B,IAAsC,MAAM,IAAI,MAAhD,IAA0D,MAAM,IAAI,MAA3E;AACD,CARD;AAUA;;;;;;;;;;;;AAUA,IAAM,eAAe,GAAG,SAAS,eAAT,CAAyB,KAAzB,EAAgC,KAAhC,EAAuC;AAC7D,MAAM,UAAU,GAAG,SAAS,CAAC,MAA7B;;AAEA,MAAI,UAAU,GAAG,CAAjB,EAAoB;AAClB,WAAO,KAAP;AACD;;AAED,MAAI,MAAJ;;AAEA,MAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,IAAA,MAAM,GAAG,QAAQ,CAAC,KAAD,CAAjB;AACD,GAFD,MAEO,IAAI,UAAU,GAAG,CAAjB,EAAoB;AACzB,IAAA,MAAM,GAAG,QAAQ,CAAC,KAAD,EAAQ,KAAR,CAAjB;AACD;;AAED,SAAO,MAAM,CAAC,MAAD,CAAb;AACD,CAhBD;;AAkBA,eAAe,eAAf","file":"is-surrogate-pair-x.esm.js","sourcesContent":["import isString from 'is-string';\n\nconst {charCodeAt} = '';\n\nconst checkPair1 = function checkPair1(char1) {\n  return isString(char1) && char1.length === 2;\n};\n\nconst checkPair2 = function checkPair2(char1, char2) {\n  return isString(char1) && char1.length === 1 && isString(char2) && char2.length === 1;\n};\n\nconst getPair1 = function getPair1(char1) {\n  if (checkPair1(char1)) {\n    return {\n      first: charCodeAt.call(char1, 0),\n      second: charCodeAt.call(char1, 1),\n    };\n  }\n\n  return false;\n};\n\nconst getPair2 = function getPair2(char1, char2) {\n  if (checkPair2(char1, char2)) {\n    return {\n      first: charCodeAt.call(char1, 0),\n      second: charCodeAt.call(char2, 0),\n    };\n  }\n\n  return false;\n};\n\nconst isPair = function isPair(result) {\n  if (result === false) {\n    return false;\n  }\n\n  const {first, second} = result;\n\n  return first >= 0xd800 && first <= 0xdbff && second >= 0xdc00 && second <= 0xdfff;\n};\n\n/**\n * Tests if the two character arguments combined are a valid UTF-16\n * surrogate pair.\n *\n * @param {*} char1 - The character combination, or if `char2` is supplied then\n *  the first character of a suspected surrogate pair.\n * @param {*} [char2] - The second character of a suspected surrogate pair.\n * @returns {boolean} Returns true if the two characters create a valid\n *  'UTF-16' surrogate pair; otherwise false.\n */\nconst isSurrogatePair = function isSurrogatePair(char1, char2) {\n  const argsLength = arguments.length;\n\n  if (argsLength < 1) {\n    return false;\n  }\n\n  let result;\n\n  if (argsLength === 1) {\n    result = getPair1(char1);\n  } else if (argsLength > 1) {\n    result = getPair2(char1, char2);\n  }\n\n  return isPair(result);\n};\n\nexport default isSurrogatePair;\n"]}